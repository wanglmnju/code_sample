c      TWO-DIMENSIONAL xy MODEL
      INTEGER NROWS,NCOLS,NR,NL,NPASS,NEQIL
      DOUBLE PRECISION H_TEMP,L_TEMP,TEMP_INTERVAL
      PARAMETER(NROWS=32)      ! NUMBER OF SITES ALONG X-AXIS  
      PARAMETER(NCOLS=32)      ! NUMBER OF SITES ALONG Y-AXIS
c      PARAMETER(NR=NROWS)    ! PERIODIC BOUNDARY CONDITION
c      PARAMETER(NL=NCOLS)    ! PERIODIC BOUNDARY CONDITION
      PARAMETER(NPASS=2)      ! NUMBER OF PASSES FOR MC ALGORITHM
      PARAMETER(NEQUIL= 1)      ! NUMBER OF EQILIBRATION STEPS (SKIP)
      PARAMETER(H_TEMP=2.0D0)     ! STARTING TEMPRATURE
      PARAMETER(L_TEMP=2.0D0)      ! FINAL  TEMPRATURE
      PARAMETER(TEMP_INTERVAL=0.1D0)         ! INTERBAL 

      DOUBLE PRECISION ENERGY,DELTAE,BETA,LOG_ETA,MAGX,MAGY,
     1                 EN_AVE,EN2_AVE,MAG,MAG_AVE,MAG2_AVE,
     2                 TEMP,RAN(1),PI,TPI,A(NROWS,NCOLS),TRIAL_SPIN
c     3                 ,RNT
      INTEGER OUTPUT_COUNT,NT,IT,IPASS,AC

C INPUT PARAMETERS AND OUTPUT RESULTS FOR THE PROGRAM
      OPEN(UNIT=1,FILE='SPINARRAY.txt',STATUS='UNKNOWN',ACCESS='APPEND')
      WRITE(1,*) NROWS, NCOLS
      WRITE(1,*) 
      OPEN(UNIT=2,FILE='MAG.txt',STATUS='UNKNOWN',ACCESS='APPEND')
      WRITE(2,*) "temp      AVE_MAG     AVE_MAG2      SUSCEPTIBILITY"
      OPEN(UNIT=3,FILE='ENERGY.txt',STATUS='UNKNOWN',ACCESS='APPEND')
      WRITE(3,*) "temp      AVE_EN      AVE_EN2       C_v"
      OPEN(UNIT=4,FILE='T.txt',STATUS='UNKNOWN',ACCESS='APPEND')

      PI=4.0D0*DATAN(1.0D0)
      TPI=2.0D0*PI
c      WRITE(4,*) PI,TPI

      RNT=(H_TEMP-L_TEMP)/TEMP_INTERVAL
      NT=INT(RNT)+1
      DO 666 IT=1,NT

      TEMP=H_TEMP-TEMP_INTERVAL*DFLOAT(IT-1)

c     INITIALIZA VARIABLES
      BETA=1.0D0/TEMP
      OUTPUT_COUNT=0
      EN_AVE=0.0D0
      EN2_AVE=0.0D0
      MAG_AVE=0.0D0
      MAG2_AVE=0.0D0
      AC=0


C    SET UP THE INITIAL SPIN CONFIGURATION
      DO 11 I=1,NROWS
      DO 11 J=1,NCOLS
      CALL RANECU(RAN,1) 
       A(I,J)=TPI*(RAN(1)-0.5D0)
11    CONTINUE

c       WRITE(4,*) NT,TEMP,NR,NL
c       WRITE(4,'(8X,6F7.4)') ((A(I,J),J=1,NL),I=1,NR)
c       WRITE(4,*) 

C  MAIN LOOP CONTAINING MONTE CARLO ALORITHM
      DO 660 IPASS=1,NPASS
C  RANDOMLY CHOOSE A SPIN TO CHANGE
      DO 20 I=1,NROWS
      DO 20 J=1,NCOLS
      CALL RANECU(RAN,1)
c      WRITE(4,*) RAN(1)
      TRIAL_SPIN= TPI*(RAN(1)-0.5D0)
c      WRITE(4,*)  TRIAL_SPIN
      IF((TRIAL_SPIN-A(I,J)).GT. PI)       TRIAL_SPIN=TPI-TRIAL_SPIN     
      IF((TRIAL_SPIN-A(I,J)).LT.(-1.0*PI)) TRIAL_SPIN=TPI+TRIAL_SPIN

C  FIND CHANGE IN ENERGY (DELTAE) DUE TO  TRIAL MOVE
C  IF EXP(-BETA*DELTAE)> ETA, WHERE ETA IS RANDOME,ACCEPT MOVE

C  PERIODIC BOUNDARY CONDITION
      IP=I+1
      IM=I-1
      JP=J+1
      JM=J-1
      IF(IP.GT.NROWS) IP=IP-NROWS
      IF(IM.LT.1    ) IM=IM+NROWS
      IF(JP.GT.NROWS) JP=JP-NCOLS
      IF(JM.LT.1    ) JM=JM+NCOLS
      DELTAE=-(DCOS(TRIAL_SPIN-A(IP,J))+DCOS(TRIAL_SPIN-A(IM,J))+
     1         DCOS(TRIAL_SPIN-A(I,JP))+DCOS(TRIAL_SPIN-A(I,JM)))
     2       +(DCOS(A(I,J)-A(IP,J))+DCOS(A(I,J)-A(IM,J))+
     3         DCOS(A(I,J)-A(I,JP))+DCOS(A(I,J)-A(I,JM)))
      CALL RANECU(RAN,1)
c      WRITE(4,*) RAN(1),DELTAE
      LOG_ETA=DLOG(RAN(1))
      IF((-BETA*DELTAE).GE.LOG_ETA) THEN
      A(I,J)=TRIAL_SPIN
C      IF(I.EQ.2) A(NR,J)=TRIAL_SPIN
C      IF(I.EQ.NROWS+1) A(1,J)=TRIAL_SPIN
C      IF(J.EQ.2) A(I,NL)=TRIAL_SPIN
C      IF(J.EQ.NCOLS+1) A(I,1)=TRIAL_SPIN
      ENDIF
     

c      WRITE(4,*)  TRIAL_SPIN,A(I,J)
c      WRITE(4,904) -BETA,DELTAE,-BETA*DELTAE,LOG_ETA
c904   FORMAT(1X,F5.2,4X,F5.2,4X,F5.2,4X,F5.2)
c      WRITE(4,*)
20     CONTINUE
c      WRITE(4,'(4X,6F7.4)') ((A(I,J),J=1,NL),I=1,NR)
c      WRITE(4,*)
c      WRITE(4,*)

C IF IPASS IS GREATER THAN NERUIL,CALULATE THE MAG AND ENE
      IF (IPASS.GT.NEQUIL)THEN
      OUTPUT_COUNT=OUTPUT_COUNT+1
      ENERGY=0.0D0
      MAGX=0.0D0
      MAGY=0.0D0

      DO 10 I=1,NROWS
      DO 10 J=1,NCOLS
C  PERIODIC BOUNDARY CONDITION
      IP=I+1
      IM=I-1
      JP=J+1
      JM=J-1
      IF(IP.GT.NROWS) IP=IP-NROWS
      IF(IM.LT.1    ) IM=IM+NROWS
      IF(JP.GT.NROWS) JP=JP-NCOLS
      IF(JM.LT.1    ) JM=JM+NCOLS
        ENERGY=ENERGY-(DCOS(A(I,J)-A(IP,J))+DCOS(A(I,J)-A(IM,J))+
     1                 DCOS(A(I,J)-A(I,JP))+DCOS(A(I,J)-A(I,JM)))
        MAGX=MAGX+DSIN(A(I,J))
        MAGY=MAGY+DCOS(A(I,J))
10    CONTINUE
      WRITE(4,*)  ENERGY
C DIVEDE THE ENERGY BY THE TOTAL NUMBER OF SPINS TO GET THE AVE ENERGY PER SPIN,
C AND ALSO DEVIDE BY 2 TO ACCOUNT FOR DOUBLE COUNTING
      ENERGY=ENERGY/DFLOAT(NROWS*NCOLS*2)      
      EN_AVE=EN_AVE+ENERGY
      EN2_AVE=EN2_AVE+ENERGY**2.0D0

      MAG=DSQRT(MAGX**2.0D0+MAGY**2.0D0)/DFLOAT(NROWS*NCOLS*1)
      MAG_AVE=MAG_AVE+MAG
      MAG2_AVE=MAG2_AVE+MAG**2.0D0  
      ENDIF

c      WRITE(1,*)  OUTPUT_COUNT,ENERGY,MAG
c      WRITE(1,*)

660   CONTINUE
      WRITE(1,*) TEMP
      WRITE(1,'(8X,6F7.4)') ((A(I,J),J=1,NCOLS),I=1,NROWS)
      WRITE(1,*)
      WRITE(2,903) TEMP,ABS(MAG_AVE/OUTPUT_COUNT),
     3             MAG2_AVE/OUTPUT_COUNT,
     1             BETA*(MAG2_AVE/OUTPUT_COUNT-
     2            (MAG_AVE/OUTPUT_COUNT)**2)
      WRITE(3,903) TEMP,EN_AVE/OUTPUT_COUNT, EN2_AVE/OUTPUT_COUNT
     2           ,(BETA**2)*(EN2_AVE/OUTPUT_COUNT
     3                    -(EN_AVE/OUTPUT_COUNT)**2)
903   FORMAT(F10.6,5x, F10.6,5x,F10.6,5x,F10.6)
666   CONTINUE
      CLOSE (1)
      CLOSE (2)
      CLOSE (3)
      CLOSE (4)
      STOP
      END 
    
C THIS SUBROUTINE GENERATES A ARRAY OF RANDOM NUMBERS.
      SUBROUTINE RANECU(RVEC,LEN)
      INTEGER LEN,ISEED1,ISEED2,I,K,IZ,IS1,IS2
      DOUBLE PRECISION RVEC(LEN)
C       PORTABLE RANDOM NUMBER GENERATOR PROPOSED BY L'ECUYER
C        IN COMMUN. ACM 31 (1988) 743
C        SLIGHTLY MODIFIED BY F. JAMES, 1988, TO GENERATE A VECTOR
C        OF PSEUDORANDOM NUMBERS RVEC OG LENGTH LEN
C        THIS PROGRAM IS COPIED FROM F. JAMES, COMPUTER PHYSICS
C         COMMUNICATIONS 60 (1990) 329-344 NORTH-HOLLAND
      SAVE ISEED1, ISEED2
      DATA ISEED1, ISEED2/12345,67890/
C
      DO 100 I=1,LEN
      K=ISEED1/53668
      ISEED1=40014*(ISEED1-K*53668) - K*12211
      IF(ISEED1.LT.0) ISEED1=ISEED1+2147483563
C
      K=ISEED2/52774
      ISEED2=40692*(ISEED2-K*52774)-K*3791
      IF(ISEED2.LT.0) ISEED2=ISEED2+2147483399
C
      IZ=ISEED1-ISEED2
      IF(IZ.LT.1) IZ=IZ+2147483562
C
      RVEC(I)=DFLOAT(IZ)*4.656613D-10
100   CONTINUE
      RETURN
C
      ENTRY RECUIN(IS1,IS2)
      ISEED1=IS1
      ISEED2=IS2
      RETURN
C
      ENTRY RECUUT(IS1,IS2)
      IS1=ISEED1
      IS2=ISEED2
      RETURN
      END
